// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputeNormals

#include "CoreRP/ShaderLibrary/Common.hlsl"

Texture3D<half> _NoiseTexture;
SamplerState s_linear_clamp_sampler;

RWTexture3D<half3> _NormalTexture;
float3 chunkSize;

float sample(float3 pos)
{
	// return LOAD_TEXTURE3D(_NoiseTexture, pos);
	return SAMPLE_TEXTURE3D_LOD(_NoiseTexture, s_linear_clamp_sampler, pos / chunkSize, 0);
}

[numthreads(8, 8, 8)]
void ComputeNormals(uint3 id : SV_DispatchThreadID)
{
	float3 p = float3(id) + 0.5;

	const float2 epsylon = float2(0.5, 0);

	_NormalTexture[id] = -normalize(float3(
        sample(p + epsylon.xyy) - sample(p - epsylon.xyy),
        sample(p + epsylon.yxy) - sample(p - epsylon.yxy),
        sample(p + epsylon.yyx) - sample(p - epsylon.yyx)
    ));
}
