// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputeNormals

#include "CoreRP/ShaderLibrary/Common.hlsl"

Texture3D<half> _NoiseTexture;
SamplerState s_trilinear_clamp_sampler;

RWTexture3D<half3> _NormalTexture;
float3 chunkSize;

float sample(float3 pos)
{
	return SAMPLE_TEXTURE3D_LOD(_NoiseTexture, s_trilinear_clamp_sampler, pos, 0);
}

[numthreads(8, 8, 8)]
void ComputeNormals(uint3 id : SV_DispatchThreadID)
{
    // do not compute normals on the boreder, they will be false
    if (any((id % (chunkSize - 1)) == 0))
        return ;

	float3 p = float3(id) / chunkSize;

	const float EPSILON = rcp(chunkSize.x);

	_NormalTexture[id] = -normalize(float3(
        sample(float3(p.x + EPSILON, p.y, p.z)) - sample(float3(p.x - EPSILON, p.y, p.z)),
        sample(float3(p.x, p.y + EPSILON, p.z)) - sample(float3(p.x, p.y - EPSILON, p.z)),
        sample(float3(p.x, p.y, p.z  + EPSILON)) - sample(float3(p.x, p.y, p.z - EPSILON))
    ));
}
